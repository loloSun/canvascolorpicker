/** * @Author    ruanye * @DateTime  2016-12-19 * @license    MIT * @version   1.0 * @ description   html5 color picker */window.onload = function() {    //获取偏移的函数    var flag = false;    var $ = function(id) {        return document.getElementById(id)    }    offset = function() {        var curEle = arguments[0],            par = curEle.offsetParent,            left = curEle.offsetLeft,            top = curEle.offsetTop;        while (par) {            left += par.offsetLeft, top += par.offsetTop;            if (navigator.userAgent.indexOf("MSIE 8.0") <= -1) {                left += par.clientLeft, top += par.clientTop;            }            par = par.offsetParent;        }        return {            left: left,            top: top        };    }    //获取坐标位置    getEvent = function(event, original) {        var eventDoc, doc, body;        if (event.pageX == null && original.clientX != null) {            eventDoc = event.target.ownerDocument || document;            doc = eventDoc.documentElement;            body = eventDoc.body;            event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);            event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);        }        return event;    }    var ColorPicker = {        newColorPicker: function(id, url) {            this.init.prototype = ColorPicker;            return new this.init(id, url);            /*实例化一个对象*/        },        init: function(id, imgurl) {            this.id = id;            this.imgurl = imgurl;            var bCanPreview = true, //可以预览                flag = false; //判断点击            // 创建画布和上下文对象            this.canvas = canvas = document.getElementById(id);            this.ctx = ctx = canvas.getContext('2d');            // 绘制图像            this.images = image = new Image();            image.onload = function() {                ctx.drawImage(image, 0, 0, image.width, image.height); // draw the image on the canvas            }            // 添加色轮            var imageSrc = imgurl;            image.src = imageSrc;            this.bindMousemove();        },        bindMousemove: function() {            console.log(canvas.getBoundingClientRect())            var top = canvas.getBoundingClientRect().top;            var self = this;            //监听鼠标按下事件              canvas.addEventListener('mouseup', function(event, setcolorCallback) {                getMousePosition(event, this);                // 获取当前位置的坐标                var canvasOffset = offset(canvas),                    canvasX = Math.floor(event.x - canvasOffset.left),                    canvasY = Math.floor(event.y - canvasOffset.top),                    // 获取当前像素                    imageData = ctx.getImageData(canvasX, canvasY, 1, 1),                    pixel = imageData.data,                    ColorObj = {                        r: pixel[0],                        g: pixel[1],                        b: pixel[2]                    };            self.updateMaker();                self.initMarker(event.x, event.y - top);                self.setcolorCallback(ColorObj)            }, false)        },        //设置颜色        setcolorCallback: function(ColorObj) {            var r = ColorObj.r,                g = ColorObj.g,                b = ColorObj.b;            $('rVal').value = r;            $('gVal').value = g;            $('bVal').value = b;            $('rgbVal').value = r + ',' + g + ',' + b;            //获取rgb颜色和16进制颜色            dColor = 65536 * r + 256 * g + b;            hexcolr = '#' + ('0000' + dColor.toString(16)).substr(-6)            $('preview').style.backgroundColor = hexcolr;            $('hexVal').value = hexcolr;        },        //初始化拖拽的点        initMarker: function(x, y) {            ctx.beginPath();            ctx.arc(x, y, 6, 0, 360, false);            ctx.fillStyle = "#fff"; //填充颜色,默认是黑色            ctx.fill(); //画实心圆            ctx.closePath();        },        //更新拖拽点位置        updateMaker: function() {            ctx.drawImage(image, 0, 0, image.width, image.height);        }    }    ColorPicker.newColorPicker('picker', 'images/colorwheel1.png')    // canvas.addEventListener('click', function() {    //     bCanPreview = !bCanPreview;    // })    document.getElementById('preview').addEventListener('click', function(argument) {        console.log(!flag)        if (!flag) {            document.getElementById('colorpicker').style.display = 'block';            flag = !flag;        } else {            document.getElementById('colorpicker').style.display = 'none';            flag = !flag;        }        bCanPreview = true;    }, false)    // //设置颜色    document.getElementById('setit').addEventListener('click', function(e) {        e.stopPropagation();        e.preventDefault();        var setcolot = document.getElementById('setcolot');        var colorValue = setcolot.value.colorRgb();        ColorPicker.initMarker(getPosition(colorValue).x, getPosition(colorValue).y)    }, false)}//根据颜色获取坐标function getPosition(color) {    canvas = document.getElementById('picker');    ctx = canvas.getContext('2d');    width = canvas.width;    imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);    datas = imageData.data;    for (var i = 0; i < datas.length; i += 4) {        if (            color[0] === datas[i] &&            color[1] === datas[i + 1] &&            color[2] === datas[i + 2]        ) {            break;        }    }    return {        x: parseInt(i / 4 % width),        y: parseInt(i / 4 / width)    }}var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;/*16进制颜色转为RGB格式*/String.prototype.colorRgb = function() {    var sColor = this.toLowerCase();    if (sColor && reg.test(sColor)) {        if (sColor.length === 4) {            var sColorNew = "#";            for (var i = 1; i < 4; i += 1) {                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));            }            sColor = sColorNew;        }        //处理六位的颜色值          var sColorChange = [];        for (var i = 1; i < 7; i += 2) {            sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));        }        return sColorChange;    } else {        return sColor;    }};